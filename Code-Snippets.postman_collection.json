{
	"info": {
		"_postman_id": "41c6008c-11a2-4e24-8bc0-85f026f47c60",
		"name": "Code-Snippets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10306084"
	},
	"item": [
		{
			"name": "AWS",
			"item": [
				{
					"name": "Lambda",
					"item": [
						{
							"name": "MongoDB",
							"item": [
								{
									"name": "GET",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mongodb_lambdas_url}}/test/users/66fb2f660ac72d277125ee90",
											"host": [
												"{{mongodb_lambdas_url}}"
											],
											"path": [
												"test",
												"users",
												"66fb2f660ac72d277125ee90"
											]
										},
										"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
									},
									"response": []
								},
								{
									"name": "POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Add your name in the body\",\n    \"email\": \"test@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongodb_lambdas_url}}/test/users",
											"host": [
												"{{mongodb_lambdas_url}}"
											],
											"path": [
												"test",
												"users"
											]
										},
										"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
									},
									"response": []
								},
								{
									"name": "PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"cell\": \"1234567890\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongodb_lambdas_url}}/test/users/66fb2f660ac72d277125ee90",
											"host": [
												"{{mongodb_lambdas_url}}"
											],
											"path": [
												"test",
												"users",
												"66fb2f660ac72d277125ee90"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								},
								{
									"name": "PATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"John Smith\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongodb_lambdas_url}}/test/users/66fb2f660ac72d277125ee90",
											"host": [
												"{{mongodb_lambdas_url}}"
											],
											"path": [
												"test",
												"users",
												"66fb2f660ac72d277125ee90"
											]
										},
										"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
									},
									"response": []
								},
								{
									"name": "DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful DELETE request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mongodb_lambdas_url}}/test/users/66fb2f660ac72d277125ee90",
											"host": [
												"{{mongodb_lambdas_url}}"
											],
											"path": [
												"test",
												"users",
												"66fb2f660ac72d277125ee90"
											]
										},
										"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
									},
									"response": []
								}
							]
						},
						{
							"name": "Kafka-Producer",
							"item": [
								{
									"name": "Publish Event",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": \"test@example.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{kafka_producer_url}}/{topic}/{subject}",
											"host": [
												"{{kafka_producer_url}}"
											],
											"path": [
												"{topic}",
												"{subject}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mongodb_lambdas_url",
			"value": "https://your-lambda-url.execute-api.us-east-2.amazonaws.com/default",
			"type": "string"
		},
		{
			"key": "kafka_producer_url",
			"value": "https://your-lambda-url.execute-api.us-east-2.amazonaws.com/default",
			"type": "string"
		}
	]
}